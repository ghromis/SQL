Students at your hometown high school have decided to organize their social network using databases. So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema: 

Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present.

=======================================================================================
1. Find the names of all students who are friends with someone named Gabriel. 

select distinct H2.name 
from Highschooler H1, Friend F1, Highschooler H2 
where H1.ID = F1.ID1 and H1.name = 'Gabriel' and H2.ID = F1.ID2

=======================================================================================
2. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like.

select distinct H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Likes F1, Highschooler H2 
where H1.ID = F1.ID1 and H1.grade - H2.grade > 1 and H2.ID = F1.ID2

=======================================================================================
3. For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. 

select H1.name, H1.grade, H2.name, H2.grade 
from Highschooler H1, Highschooler H2, Likes L1, Likes L2 
where H1.ID = L1.ID1 and H2.ID = L1.ID2 and 
      L1.ID1 = L2.ID2 and L1.ID2 = L2.ID1 
      and H1.name < H2.name

=======================================================================================
4. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. 

select name, grade from Highschooler
where ID not in (
  select ID1 from Highschooler H1, Friend, Highschooler H2
  where H1.ID = Friend.ID1 and Friend.ID2 = H2.ID and H1.grade <> H2.grade)
order by grade, name;

=======================================================================================
5. Find the name and grade of all students who are liked by more than one other student.

select name, grade 
from Highschooler H, Likes L
where H.ID = L.ID2
group by L.ID2
having count(L.ID2) > 1

=======================================================================================
6. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. 

select distinct name, grade 
from Highschooler, Likes 
where Highschooler.ID not in (select ID1 from Likes ) and Highschooler.ID not in (select ID2 from Likes )
group by grade, name

=======================================================================================
7. For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C.

select HA.name, HA.grade, HB.name, HB.grade, HC.name, HC.grade
from Highschooler HA, Highschooler HB, Highschooler HC, Likes , Friend F1, Friend F2
where HA.ID = Likes.ID1 and Likes.ID2 = HB.ID and
           HB.ID not in (select ID2 from Friend where ID1 = HA.ID) and
           HA.ID = F1.ID1 and F1.ID2 = HC.ID and
           HB.ID =  F2.ID2 and F2.ID1 = HC.ID


=======================================================================================
8. Find the difference between the number of students in the school and the number of different first names. 

select count(name) - count(distinct name)
from Highschooler

=======================================================================================
9. What is the average number of friends per student? 

select round(count(ID1),2) / count(distinct ID)
from Highschooler, Friend
where ID = ID1

=======================================================================================
10. Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. 

select count(distinct H2.name) +5
from Highschooler H1, Friend F1, Highschooler H2, Friend F2, Friend F3
where H1.ID = F1.ID1 and H1.name = 'Cassandra' and H2.ID = F1.ID2  and F2.ID2 = F3.ID1 

=======================================================================================
11. Find the name and grade of the student(s) with the greatest number of friends. 

select distinct H1.name, H1.grade
from Highschooler H1, Highschooler H2, Friend F
where H1.ID = F.ID1 and H2.ID = F.ID2 
group by F.ID1
having count(F.ID1) > 3

=======================================================================================
12. It's time for the seniors to graduate. Remove all 12th graders from Highschooler.

delete from Highschooler
where grade = 12

=======================================================================================
13. If two students A and B are friends, and A likes B but not vice-versa, remove the Likes tuple.


delete from Likes
where ID2 in (select ID2 
                      from Friend 
                      where Likes.ID1 = Friend.ID1) and
      ID2 not in (select L2.ID1 
                       from Likes L1, Likes L2
                       where L1.ID1 = L2.ID2)

=======================================================================================
14. For all cases where A is friends with B, and B is friends with C, add a new friendship for the pair A and C. Do not add duplicate friendships, friendships that already exist, or friendships with oneself.


insert into friend
select F1.ID1, F2.ID2
from friend F1 join friend F2 on F1.ID2 = F2.ID1
where F1.ID1 <> F2.ID2
except
select * from friend

=======================================================================================
